const moment = require("moment");

("use strict");
const Menu = use("App/Models/Menu");
const MealType = use("App/Models/MealType");
const MenuType = use("App/Models/MenuType");
const Order = use("App/Models/Order");
const Customer = use("App/Models/Customer");
const SaleRecordAff = use("App/Models/SaleRecordsAff");

class OrderController {
  async store({ request, response, auth }) {
    const { menu_id, quantity, order_date } = request.all();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    const user = await auth.getUser();

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ customer_id ‡∏à‡∏≤‡∏Å user_id
    const customer = await Customer.findBy("user_id", user.id);
    if (!customer) {
      return response
        .status(404)
        .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const menu = await Menu.find(menu_id);
    if (!menu) {
      return response.status(404).json({ message: "Menu not found" });
    }

    const meal_type = await MealType.find(menu.meal_type_id);
    if (!meal_type) {
      return response.status(404).json({ message: "Meal type not found" });
    }

    const menu_type = await MenuType.find(meal_type.menu_type_id);
    if (!menu_type) {
      return response.status(404).json({ message: "Menu type not found" });
    }

    const menu_type_id = menu_type.id;

    const order = await Order.create({
      menu_id,
      quantity,
      order_date,
      user_id: user.id, // ‡πÄ‡∏Å‡πá‡∏ö user_id ‡∏î‡πâ‡∏ß‡∏¢
      customer_id: customer.id, // ‡πÄ‡∏û‡∏¥‡πà‡∏° customer_id ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ
      menu_type_id,
      status: "pending",
      package_status: package_status || "calculate",
    });

    return response.status(201).json({
      order,
    });
  }

  async storeAdd({ request, response, auth }) {
    const { menu_id, quantity, order_date, customer_id, package_status } = request.all();
  
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ customer_id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const customer = await Customer.find(customer_id);
    if (!customer) {
      return response
        .status(404)
        .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer_id ‡∏ô‡∏µ‡πâ" });
    }
  
    // ‡∏î‡∏∂‡∏á user_id ‡∏à‡∏≤‡∏Å customer
    const user_id = customer.user_id;
  
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const menu = await Menu.find(menu_id);
    if (!menu) {
      return response.status(404).json({ message: "Menu not found" });
    }
  
    const meal_type = await MealType.find(menu.meal_type_id);
    if (!meal_type) {
      return response.status(404).json({ message: "Meal type not found" });
    }
  
    const menu_type = await MenuType.find(meal_type.menu_type_id);
    if (!menu_type) {
      return response.status(404).json({ message: "Menu type not found" });
    }
  
    const menu_type_id = menu_type.id;
  
    const order = await Order.create({
      menu_id,
      quantity,
      order_date,
      user_id, // ‡πÉ‡∏ä‡πâ user_id ‡∏à‡∏≤‡∏Å customer
      customer_id, // ‡πÉ‡∏ä‡πâ customer_id ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      menu_type_id,
      status: "pending",
      package_status: package_status || 'calculate'
    });
  
    return response.status(201).json({
      order,
    });
  }
  

  async updateQuantity({ request, response, params }) {
    const { quantity } = request.all();

    if (!quantity || quantity <= 0) {
      return response.status(400).json({ message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå" });
    }

    const order = await Order.find(params.id);
    if (!order) {
      return response.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    order.quantity = quantity;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    await order.save();

    return response.status(200).json({
      message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß",
      order,
    });
  }

  async destroy({ params, response }) {
    const order = await Order.find(params.id);

    if (!order) {
      return response.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Meal type" });
    }

    await order.delete();

    return response.status(204).send();
  }

  async getOrdersByDateRange({ request, response }) {
    const { start_date, end_date } = request.all();

    if (!start_date || !end_date) {
      return response
        .status(400)
        .json({ message: "Please provide both start_date and end_date" });
    }

    const orders = await Order.query()
      .where("order_date", ">=", start_date)
      .andWhere("order_date", "<=", end_date)
      .fetch();

    return response.status(200).json({ orders });
  }

  async updateStatus({ params, request, response, auth }) {
    const { status } = request.only(["status"]);

    try {
      const order = await Order.find(params.id);
      if (!order) {
        return response
          .status(404)
          .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" });
      }

      const user = await auth.getUser();
      const customer = await Customer.query().where("user_id", user.id).first();
      if (!customer) {
        return response.status(404).json({ message: "Customer not found" });
      }

      let saleRecord = await SaleRecordAff.query()
        .where("customer_id", customer.id)
        .orderBy("id", "asc") // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏£‡∏Å
        .first();

      if (!saleRecord) {
        return response.status(404).json({ message: "Sale record not found" });
      }

      while (
        saleRecord.total_boxes === 0 ||
        saleRecord.remaining_days <= 0 ||
        saleRecord.payment_status === "unpaid"
      ) {
        saleRecord = await SaleRecordAff.query()
          .where("customer_id", customer.id)
          .where("id", ">", saleRecord.id) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          .orderBy("id", "asc")
          .first();

        if (!saleRecord) {
          break; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        }
      }

      if (
        !saleRecord ||
        saleRecord.total_boxes === 0 ||
        saleRecord.remaining_days < 0 ||
        saleRecord.payment_status === "unpaid"
      ) {
        return response
          .status(404)
          .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô total_boxes" });
      }

      // üü¢ **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ package_status === "calculate"**
      if (order.package_status === "calculate") {
        if (order.status === "pending" && status === "confirm") {
          saleRecord.total_boxes -= order.quantity; // ‡∏•‡∏î quantity
        }
        await saleRecord.save();
      }

      if (status === "pending") {
        if (order.package_status === "calculate") {
          // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ total_boxes ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ package_status === "calculate"
          const originalSaleRecord = await SaleRecordAff.find(
            order.sale_record_id
          );
          if (originalSaleRecord) {
            originalSaleRecord.total_boxes += order.quantity; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ total_boxes
            await originalSaleRecord.save();
          }
        }
        order.sale_record_id = null;
      } else {
        order.sale_record_id = saleRecord.id;
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
      order.status = status;
      await order.save();

      return response.status(200).json({
        message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: order,
      });
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:", error);
      return response.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        error: error.message,
      });
    }
  }


  async updateMultipleStatus({ request, response, auth }) {
    const { order_ids, status } = request.only(["order_ids", "status"]);

    try {
      const orders = await Order.query().whereIn("id", order_ids).fetch();

      if (orders.rows.length === 0) {
        return response.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
      }

      for (let order of orders.rows) {
        const customer = await Customer.query()
          .where("user_id", order.user_id)
          .first();

        if (!customer) {
          return response.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤" });
        }

        let saleRecord = await SaleRecordAff.query()
          .where("customer_id", customer.id)
          .orderBy("id", "asc") // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏£‡∏Å
          .first();

        if (!saleRecord) {
          return response
            .status(404)
            .json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢" });
        }

        while (
          saleRecord.total_boxes === 0 ||
          saleRecord.remaining_days <= 0 ||
          saleRecord.payment_status === "unpaid"
        ) {
          saleRecord = await SaleRecordAff.query()
            .where("customer_id", customer.id)
            .where("id", ">", saleRecord.id)
            .orderBy("id", "asc")
            .first();

          if (!saleRecord) {
            break;
          }
        }

        if (
          !saleRecord ||
          saleRecord.total_boxes === 0 ||
          saleRecord.remaining_days <= 0 ||
          saleRecord.payment_status === "unpaid"
        ) {
          continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }

        // üü¢ **‡πÄ‡∏ä‡πá‡∏Ñ package_status ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì**
        if (order.package_status === "calculate") {
          if (order.status === "pending" && status === "confirm") {
            saleRecord.total_boxes -= order.quantity;
          }
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô saleRecord
          await saleRecord.save();
        }

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "pending", ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sale_record_id ‡πÄ‡∏õ‡πá‡∏ô null
        if (status === "pending") {
          if (order.package_status === "calculate") {
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ total_boxes ‡∏Ç‡∏≠‡∏á sale_record_id ‡∏ô‡∏±‡πâ‡∏ô
            const originalSaleRecord = await SaleRecordAff.find(
              order.sale_record_id
            );
            if (originalSaleRecord) {
              originalSaleRecord.total_boxes += order.quantity; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ total_boxes
              await originalSaleRecord.save();
            }
          }
          order.sale_record_id = null;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô "pending", ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sale_record_id ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
          order.sale_record_id = saleRecord.id;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        order.status = status;
        await order.save();
      }

      return response.status(200).json({
        message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        updatedOrders: orders,
      });
    } catch (error) {
      return response.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        error: error.message,
      });
    }
  }


  async getOrdersByUserId({ params, request, response }) {
    const { customer_id } = params; // ‡∏£‡∏±‡∏ö customer_id ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå URL
    const { start_date, end_date } = request.all(); // ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå URL

    try {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢ customer_id ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      const query = Order.query().where("customer_id", customer_id);

      if (start_date) {
        query.where("order_date", ">=", start_date); // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      }

      if (end_date) {
        query.where("order_date", "<=", end_date); // ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
      }

      const orders = await query.fetch();

      if (orders.rows.length === 0) {
        return response.status(404).json({
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        });
      }

      return response.status(200).json({ orders });
    } catch (error) {
      return response.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
        error: error.message,
      });
    }
  }

  async getOrdersByDate({ request, response }) {
    const { start_date, end_date } = request.all(); // ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå URL

    try {
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      const query = Order.query();

      if (start_date) {
        query.where("order_date", ">=", start_date); // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      }

      if (end_date) {
        query.where("order_date", "<=", end_date); // ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
      }

      const orders = await query.fetch();

      if (orders.rows.length === 0) {
        return response.status(404).json({
          message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        });
      }

      return response.status(200).json({ orders });
    } catch (error) {
      return response.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
        error: error.message,
      });
    }
  }
}

module.exports = OrderController;
