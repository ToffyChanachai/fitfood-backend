"use strict";
const Customer = use("App/Models/CustomerHhb");

class CustomerHhbController {
  async index({ response }) {
    try {
      const customers = await Customer.all();

      return response.json(customers);
    } catch (error) {
      console.error(error);
      return response.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  }

  async update({ params, request, response }) {
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ID
      const customer = await Customer.findOrFail(params.id);
      const data = request.only([
        "email",
        "customer_id",
        "name",
        "tel",
        "line_id",
        "nearby_places",
        "address",
        "recipient",
        "note",
        "address_1",
        "address_2",
        "address_3", // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô zone_id
      ]);

      customer.merge(data);
      await customer.save();

      return response.json(customer);
    } catch (error) {
      return response
        .status(500)
        .json({ message: "Error updating customer", error });
    }
  }

  async updateDelivery({ params, request, response }) {
    const { delivery_round, deliver, delivery_zone } = request.only([
      "delivery_round", 
      "deliver", 
      "delivery_zone"
    ]);
  
    try {
        const Customer = await Customer.find(params.id);
      if (!Customer) {
        return response.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢" });
      }
  
      // üõ† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
      Customer.delivery_round = delivery_round || null; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
      Customer.deliver = deliver || null; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
      Customer.delivery_zone = delivery_zone || null; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  
      // üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      await Customer.save();
  
      return response.status(200).json({
        message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: Customer,
      });
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:", error);
      return response.status(500).json({
        message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
        error: error.message,
      });
    }
  }

  async destroy({ params, response }) {
    try {
      const customer = await Customer.findOrFail(params.id);
      await customer.delete();

      return response.json({ message: "Customer deleted successfully" });
    } catch (error) {
      return response
        .status(500)
        .json({ message: "Error deleting customer", error });
    }
  }
}

module.exports = CustomerHhbController;
